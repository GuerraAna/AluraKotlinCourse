Programação Procedural: . Códigos difícieis de representar a vida real;
                        . Cria variáveis do início ao fim;
                        . Difícil compreensão caso não conheça o código.
                        . Dfícil manutenção e estruturação.

Programação Orientada ao Objeto: . Trazer o mundo real para o virtual;
                                 . Código mais estruturardo / organizado;
                                 . Mais fácil de compreender.

          * Objeto: Representação dos objetos reais no mundo virtual.

          * Classes: . As classes podem ser criadas em nível de Arquivo (fora da função);
                     . As classes podem ser criaradas dentro das funções, mas, dessa forma;
                     . As classes elas têm que ter os seus métodos dentro delas! Ou seja, a Classe tem que saber o que aquilo representa;
                     . Em POO a classe que tem que alterar o seu valor e não uma função fora dela, como é feito no contaAna.kt
                     . Em POO a classe contém o método e este método é chamado na main pelo objeto que invoca a classe;
                     . Na classe, o this é usado para identificar que a manipulação dos dados em um método é feito naquele objeto;
                     . A utilização do this serve para identificar o objeto correspondente que dará valor á propriedade da classe.

                    1) Init (this);
                    2) Construtor Primário;
                    3) Construtor Secundário (this).

          * Funções: . Dão funcionalidade/Ações/Funções para as classes;
                     . Podendo criar funções de operações matemáticas;
                     . Podendo criar funções que represente qualque tipo de ação;
                     . Em POO as funções internas às classes são chamadas de membros (comportamentos);

          * Encapsulamento:
                               1) Getter e Setter: . Encapsulamento: São modificadores de acesso que permitem ou não acesso a conta;
                                                        1. private em objetos;
                                                        2. protected em classes.
                                                   . Para acessar um dado, devemos copiá-lo e ai utiliza-se o get ou setter:
                                                            1. Get:
                                                            2. Setter:
                                                            . Estão relacionados à boas práticas de programação;
                                                            . Estão relacionados ao paradígma de orientação a objetos;
                                                            . Utilizados como pontos de melhoria no código.

                               2) Properties:   . Substitui o Getter e Setter;
                                                . O Propertie é a entrada do cliente na class pela fun main();
                                                . É uma variável que sempre tem acesso a um Getter e Setter próprio;
                                                . O field é o valor inicial, aquele que está interno, como padrão na class;
                                                . O field precisa da indicação de qual membro da classe irá receber as properties getter e setter;


          * Herança: . Objetivo: fazer um código mais consistente;
                     . Dica: Criar arquivos separados para melhor representar a herança;
                     .

          * Polimorfismo:

          * Interface:

          * Abstração:

          * Data Class:

          * Enum Class: